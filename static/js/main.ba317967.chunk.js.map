{"version":3,"sources":["common/hooks/useNFCReader.jsx","common/credits/components/Credits.jsx","common/credits/index.js","common/credits/components/CreditsContainer.jsx","pages/home/components/Home.jsx","pages/home/index.js","pages/home/components/HomeContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["useNFCReader","useState","device","setDevice","readTag","setReadTag","readLoop","a","opened","transferIn","payload","decoder","TextDecoder","decodedPayload","decode","data","split","console","log","error","toString","setupNFCReader","open","selectConfiguration","claimInterface","controlTransferOut","requestType","recipient","request","value","index","configureNewNFCReader","navigator","usb","requestDevice","filters","vendorId","authorizedDevice","useEffect","Credits","className","classNames","href","Icon","name","CreditsContainer","Home","isDeviceConnected","Card","Content","Header","Description","Loader","active","inverted","inline","Button","onClick","size","color","HomeContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qTA+EeA,EA7EM,WAAO,IAAD,EACGC,qBADH,mBAClBC,EADkB,KACVC,EADU,OAEKF,qBAFL,mBAElBG,EAFkB,KAETC,EAFS,KAenBC,EAAQ,uCAAG,gCAAAC,EAAA,mEAETL,EAAOM,OAFE,wBAIU,GAJV,SAKWN,EAAOO,WAff,EAcO,IAJV,OAKLC,EALK,OAMLC,EAAU,IAAIC,YACdC,EAAiBF,EAAQG,OAAOJ,EAAQK,MAAMC,MAAM,KAAK,GAE/DX,EAAWQ,GACXI,QAAQC,IAAR,mCAAwCL,EAAxC,OAEAP,IAZW,gEAebW,QAAQE,MAAR,oDAC+C,KAAEC,aAhBpC,+DAAH,qDAsBRC,EAAc,uCAAG,sBAAAd,EAAA,mEAEfL,EAFe,iCAGXA,EAAOoB,OAHI,uBAIXpB,EAAOqB,oBAnCG,GA+BC,uBAKXrB,EAAOsB,eAnCM,GA8BF,wBAMXtB,EAAOuB,mBAAmB,CAC9BC,YApCa,QAqCbC,UApCmB,YAqCnBC,QApCqB,GAqCrBC,MApCwB,EAqCxBC,MApC2B,IAyBZ,QAcjBxB,IAdiB,gEAiBnBW,QAAQE,MAAR,kDAAyD,KAAEC,aAjBxC,+DAAH,qDAwBdW,EAAqB,uCAAG,4BAAAxB,EAAA,sEACGyB,UAAUC,IAAIC,cAAc,CACzDC,QAAS,CAAC,CAAEC,SA3DU,SAyDI,OACtBC,EADsB,OAK5BlC,EAAUkC,GALkB,2CAAH,qDAa3B,OAJAC,qBAAU,WACRjB,OAGK,CAACjB,EAASF,EAAQ6B,I,qEC/CZQ,EAxBC,WACd,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAWC,IAAW,uBAAwB,sBACjD,uBAAGC,KAAK,8CAA8CF,UAAU,QAC9D,kBAACG,EAAA,EAAD,CAAMC,KAAK,aADb,oBAKF,yBAAKJ,UAAWC,IAAW,uBAAwB,oBACjD,uBAAGC,KAAK,8BAA8BF,UAAU,QAC9C,kBAACG,EAAA,EAAD,CAAMC,KAAK,WADb,cAKF,yBAAKJ,UAAWC,IAAW,uBAAwB,qBACjD,uBAAGC,KAAK,+BAA+BF,UAAU,QAC/C,kBAACG,EAAA,EAAD,CAAMC,KAAK,YADb,iBCnBOC,ECEU,WACvB,OAAO,kBAAC,EAAD,OCqCMC,EAnCF,SAAC,GAA2D,IAAzD1C,EAAwD,EAAxDA,QAAS2C,EAA+C,EAA/CA,kBAAmBhB,EAA4B,EAA5BA,sBAC1C,OAAKgB,EAaH,yBAAKP,UAAU,OACZpC,EACC,kBAAC4C,EAAA,EAAD,CAAMR,UAAU,YACd,kBAACQ,EAAA,EAAKC,QAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,qBACA,kBAACF,EAAA,EAAKG,YAAN,wBACkB,yBAAKX,UAAU,cAAcpC,MAKnD,kBAACgD,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,EAACC,OAAO,YAA/B,sBAKF,kBAAC,EAAD,OA3BA,yBAAKf,UAAU,OACb,kBAACgB,EAAA,EAAD,CAAQC,QAAS1B,EAAuB2B,KAAK,QAAQC,MAAM,UAA3D,4BAIA,kBAAC,EAAD,QCbOC,ECGO,WAAO,IAAD,EACuB5D,IADvB,mBACnBI,EADmB,KACVF,EADU,KACF6B,EADE,KAG1B,OACE,kBAAC,EAAD,CACE3B,QAASA,EACT2C,oBAAmB7C,EACnB6B,sBAAuBA,KCLd8B,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBtC,WACrBA,UAAUuC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba317967.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useNFCReader = () => {\n  const [device, setDevice] = useState();\n  const [readTag, setReadTag] = useState();\n\n  const ARDUINO_VENDOR_ID = 0x2341;\n  const IN_ENDPOINT = 5; // In endpoint ID of WebUSB for Arduino (4 for Out endpoint)\n  const CONFIG_NUMBER = 1; // Device specific configuration value\n  const INTERFACE_NUMBER = 2; // Device specific interface number\n  const REQUEST_TYPE = 'class'; // industry-standard class of devices\n  const TRANSFER_RECIPIENT = \"interface\"; // target on the transfer on the device\n  const ARDUINO_CORE_REQUEST = 0x22; // see 'USBCore.h' > #define CDC_SET_CONTROL_LINE_STATE\t0x22\n  const ARDUINO_CONTROL_CONNECT = 0x01; // Vendor-specific, 0x00 for DISCONNECT\n  const RECIPIENT_INTERFACE_NUMBER = 0x02; // Interface number on the recipient\n\n  // Loop to read the NFC tags\n  const readLoop = async () => {\n    try {\n      if (device.opened) {\n        // Read the bytes from the device\n        const bufferLength = 64;\n        const payload = await device.transferIn(IN_ENDPOINT, bufferLength);\n        const decoder = new TextDecoder();\n        const decodedPayload = decoder.decode(payload.data).split(\"/\")[1];\n\n        setReadTag(decodedPayload);\n        console.log(`Read NTAG213 containing '${decodedPayload}'.`);\n\n        readLoop();\n      }\n    } catch (e) {\n      console.error(\n        `Error while reading from the NFC Reader:\\n${e.toString()}`\n      );\n      throw e;\n    }\n  };\n\n  const setupNFCReader = async () => {\n    try {\n      if (device) {\n        await device.open();\n        await device.selectConfiguration(CONFIG_NUMBER);\n        await device.claimInterface(INTERFACE_NUMBER);\n        await device.controlTransferOut({\n          requestType: REQUEST_TYPE, \n          recipient: TRANSFER_RECIPIENT,\n          request: ARDUINO_CORE_REQUEST,\n          value: ARDUINO_CONTROL_CONNECT,\n          index: RECIPIENT_INTERFACE_NUMBER\n        });\n\n        readLoop();\n      }\n    } catch (e) {\n      console.error(`Error while setting up the NFC Reader:\\n${e.toString()}`);\n      throw e;\n    }\n  };\n\n  // Get the plugged devices and extract the one having the Arduino's vendor id, then asks the user\n  // to choose from the resulting list\n  const configureNewNFCReader = async () => {\n    const authorizedDevice = await navigator.usb.requestDevice({\n      filters: [{ vendorId: ARDUINO_VENDOR_ID }]\n    });\n\n    setDevice(authorizedDevice);\n  };\n\n  // When a device has been found, we initiate a connection with it\n  useEffect(() => {\n    setupNFCReader();\n  });\n\n  return [readTag, device, configureNewNFCReader];\n};\n\nexport default useNFCReader;\n","import React from \"react\";\nimport \"./Credits.css\";\nimport { Icon } from \"semantic-ui-react\";\nimport classNames from \"classnames\";\n\nconst Credits = () => {\n  return (\n    <div className=\"creditsContainer\">\n      <div className={classNames(\"socialMediaContainer\", \"linkedInContainer\")}>\n        <a href=\"https://www.linkedin.com/in/gautierdarchen/\" className=\"link\">\n          <Icon name=\"linkedin\" /> gautierdarchen\n        </a>\n      </div>\n\n      <div className={classNames(\"socialMediaContainer\", \"githubContainer\")}>\n        <a href=\"https://github.com/gdarchen\" className=\"link\">\n          <Icon name=\"github\" /> gdarchen\n        </a>\n      </div>\n\n      <div className={classNames(\"socialMediaContainer\", \"twitterContainer\")}>\n        <a href=\"https://twitter.com/GDarchen\" className=\"link\">\n          <Icon name=\"twitter\" /> @GDarchen\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Credits;\n","import CreditsContainer from \"./components/CreditsContainer\";\n\nexport default CreditsContainer;\n","import React from \"react\";\n\nimport Credits from \"./Credits\";\n\nconst CreditsContainer = () => {\n  return <Credits />;\n};\n\nexport default CreditsContainer;\n","import \"./Home.css\";\n\nimport React from \"react\";\nimport { Button, Card, Loader } from \"semantic-ui-react\";\n\nimport Credits from \"../../../common/credits\";\n\nconst Home = ({ readTag, isDeviceConnected, configureNewNFCReader }) => {\n  if (!isDeviceConnected) {\n    return (\n      <div className=\"App\">\n        <Button onClick={configureNewNFCReader} size=\"small\" color=\"orange\">\n          Configure the NFC Reader\n        </Button>\n\n        <Credits />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {readTag ? (\n        <Card className=\"nfc-card\">\n          <Card.Content>\n            <Card.Header>NFC Tag Read</Card.Header>\n            <Card.Description>\n              Received value: <div className=\"read-value\">{readTag}</div>\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      ) : (\n        <Loader active inverted inline=\"centered\">\n          Waiting for a scan\n        </Loader>\n      )}\n\n      <Credits />\n    </div>\n  );\n};\n\nexport default Home;\n","import HomeContainer from \"./components/HomeContainer\";\n\nexport default HomeContainer;\n","import React from \"react\";\n\nimport useNFCReader from \"../../../common/hooks/useNFCReader\";\nimport Home from \"./Home\";\n\nconst HomeContainer = () => {\n  const [readTag, device, configureNewNFCReader] = useNFCReader();\n\n  return (\n    <Home\n      readTag={readTag}\n      isDeviceConnected={device ? true : false}\n      configureNewNFCReader={configureNewNFCReader}\n    />\n  );\n};\n\nexport default HomeContainer;\n","import React from \"react\";\nimport Home from \"./pages/home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}